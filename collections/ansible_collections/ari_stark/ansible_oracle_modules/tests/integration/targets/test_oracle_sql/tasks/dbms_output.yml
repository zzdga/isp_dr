---
- name: define connection parameters
  set_fact:
    sys_connection_parameters: &sys_con_param
      service_name: "{{ service_name }}"
      username: "SYS"
      password: "{{ sys_password }}"
      mode: "sysdba"

- name: execute procedure with dbms_ouput.put_line()
  oracle_sql:
    <<: *sys_con_param
    script: |
      begin
        dbms_output.put_line('This is the cx_Oracle manual');
        dbms_output.put_line('Demonstrating how to use DBMS_OUTPUT');
      end;
      /
  register: _
  failed_when: |
    _.failed or
    'cx_Oracle manual' not in _.output_lines[0] or
    'Demonstrating' not in _.output_lines[1]

- name: execute procedure with dbms_ouput.put_line() (ignoring case)
  oracle_sql:
    <<: *sys_con_param
    script: |
      begin
        dbms_output.PUt_lINe('This is the cx_Oracle manual');
      end;
      /
  register: _
  failed_when: |
    _.failed or
    'cx_Oracle manual' not in _.output_lines[0]

- name: execute two procedures with dbms_ouput.put_line()
  oracle_sql:
    <<: *sys_con_param
    script: |
      begin
        dbms_output.put_line('This is the cx_Oracle manual');
      end;
      /
      begin
        dbms_output.put_line('Demonstrating how to use DBMS_OUTPUT');
      end;
      /
  register: _
  failed_when: |
    _.failed or
    'cx_Oracle manual' not in _.output_lines[0] or
    'Demonstrating' not in _.output_lines[1]

- name: execute procedure without dbms_ouput.put_line()
  oracle_sql:
    <<: *sys_con_param
    script: |
      declare
        foo varchar2(10);
      begin
        foo := 'ab';
      end;
      /
  register: _
  failed_when: _.failed or _.output_lines | length != 0
...
